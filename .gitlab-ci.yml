variables:
  APPIMAGE_NAME:   "$CI_REGISTRY_USER/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA"
  DOCKER_DRIVER: overlay2
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  KUBE_CONFIG_FILE: /Users/srajeshkumar/.kube/config

stages:
  - testCode
  - build
  - createImage

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository  

# we use `test-compile` instead of `validate`, so the correct classpath is picked up.
.validateCode: &validate
  stage: testCode
  tags:
    - maven
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'

# For merge requests do not `deploy` but only run `verify`
.verifyFeatureCode: &verify
  stage: testCode
  tags:
    - maven
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Validate merge requests using JDK8
validateAppCode:jdk8:
  <<: *validate
  image: maven:3.3.9-jdk-8

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify
  image: maven:3.3.9-jdk-8

# For `master` branch run `mvn deploy` automatically
buildAppBinary:jdk8:
  # Use stage test here, so the pages job may later pickup the created site
  stage: build
  tags:
    - maven
  script:
    - 'mvn $MAVEN_CLI_OPTS package -DskipTests'
    - ls -la
  only:
    - master
  # Archive up the built documentation site.
  artifacts:
      when: on_success
      name: "$CI_COMMIT_REF_NAME"
      paths:
      - target/*.jar
  image: maven:3.3.9-jdk-8

# Containerise the app
buildAppImage:
    stage: createImage
    tags:
      - createimage
    dependencies:
      - buildAppBinary:jdk8
    artifacts:
      name: "$CI_COMMIT_REF_NAME"
      paths:
        - target/*.jar
    script:
      - ls -la
      # - mv *.jar target/
      - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY_URL"
      - docker build -t "$APPIMAGE_NAME" .
      - docker push "$CI_REGISTRY_USER/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA"
    only:
      - master
